#!/usr/bin/python

import sys
import math
import os
import time

## global defines

# about the correctness of the triangle files
triangle_nodefile_incorrect = 0
triangle_polyfile_incorrect = 0

# about the filenames
dgf_filename = 'cube_with_hole_2d_trianlge.dgf'

## done with global defines


## function definitions

# write the dgf header into the dgf file
def write_dgf_header( file, filename ) :
	file.write( 'DGF\n' )
	#file.write( '% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n' )
	#file.write( '%s %s\n' %( '%', filename ) )
	#file.write( '%s written by triangle2dgf.py on %s\n' %( '%', time.strftime('%Y/%m/%d %H:%M:%S') ) )
	#file.write( '% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n' )

# read vertices from a .node file generated by triangle
def read_vertices( filename ) :
	global triangle_nodefile_incorrect
	list_of_vertices = [ ]
	file = open( filename, 'r' )
	number_of_vertices = 0
	number_of_vertices_set = 0
	vertex_number = 0
	for line in file.readlines() :
		words = line.split()
		if words[ 0 ] != '#' :
			if number_of_vertices_set == 0 :
				number_of_vertices = int( words[ 0 ] )
				number_of_vertices_set += 1
			else :
				if int( words[ 0 ] ) == vertex_number :
					x = float( words[ 1 ] )
					y = float( words[ 2 ] )
					vertex = [ x, y ]
					list_of_vertices.append( vertex )
				else :
					triangle_nodefile_incorrect += 1
				vertex_number += 1
	return list_of_vertices

# read faces from a .poly file
def read_faces( filename ) :
	global triangle_polyfile_incorrect
		
# write vertices to dgf file
def write_vertices( vertices, file ) :
	file.write( 'VERTEX\t\t\t\t%the vertices of the grid\n' )
	if triangle_nodefile_incorrect == 0 :
		vertex_number = 0
		for vertex in vertices :
			dgf_file.write( '%f\t%f\t%s vertex %i\n' %( vertex[ 0 ], vertex[ 1 ], '%', vertex_number ) )
			vertex_number += 1
		dgf_file.write( '#\n' )
	else :
		print 'error: write_vertices() not implemented for nonconforming nodefile'
		sys.exit()

## done with function definitions


## main
filename_prefix = sys.argv[ 1 ]
nodefile_filename = filename_prefix + '.node'
polyfile_filename = filename_prefix + '.poly'
elefile_filename = filename_prefix + '.ele'

dgf_file = open( dgf_filename, 'w' )
vertices = read_vertices( nodefile_filename )
if triangle_nodefile_incorrect != 0 :
	print 'error: the triangle nodefile is incorrect'
	sys.exit()
faces = read_faces( polyfile_filename )
write_dgf_header( dgf_file, dgf_filename )
write_vertices( vertices, dgf_file )
