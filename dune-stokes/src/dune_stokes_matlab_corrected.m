x1 = [ -1:0.01:1];
x2 = x1;
for i = 1:length( x1 )
    x1_ = x1( i );
    for j = 1:length( x2 )
        x2_ = x2( j );
        u1_(i,j) = -exp( x1_ ) * ( x2_ * cos( x2_ ) + sin( x2_ ) );
        u2_(i,j) = exp( x1_ ) * x2_ * sin( x2_ );
        p_(i,j) = 2 * exp( x1_ ) * sin( x2_ );
    end
end


M_invers = [
 0.25       0       0       0       0       0       0       0;
    0    0.25       0       0       0       0       0       0;
    0       0    0.25       0       0       0       0       0;
    0       0       0    0.25       0       0       0       0;
    0       0       0       0    0.25       0       0       0;
    0       0       0       0       0    0.25       0       0;
    0       0       0       0       0       0    0.25       0;
    0       0       0       0       0       0       0    0.25;
];

W = [
    2       0       2       0;
   -2       0      -2       0;
    0       2       0       2;
    0      -2       0      -2;
   -2       0      -2       0;
    2       0       2       0;
    0      -2       0      -2;
    0       2       0       2;
];

X = [
    -2       2       0       0       2      -2       0       0;
     0       0      -2       2       0       0       2      -2;
    -2       2       0       0       2      -2       0       0;
     0       0      -2       2       0       0       2      -2;
];

Y = [
     11.3137        0 -11.3137        0;
           0  11.3137        0 -11.3137;
    -11.3137        0  11.3137        0;
           0 -11.3137        0  11.3137;
];

Z = [
    0      -2;
    0       2;
    2       0;
   -2       0;
];

E = [
    0       0      -2      2;
    2      -2       0      0;
];

R = [
     2.8284    -2.8284;
    -2.8284     2.8284;
];

H1 = [
          0;
     -4.593;
      2.3155;
     -2.797;
          0;
      4.593;
      0.3134;
     -2.797;
];

H2 = [
     9.1859;
    10.2251;
     9.1859;
    -6.2208;
];

H3 = [
     2.797;
     2.797;
];

A = Y - X * M_invers * W;

B = Z;

B_T = - E;

C = R;

F = H2 - X * M_invers * H1;

G = - H3;

A_invers = inv( A );

schur_S = B_T * A_invers * B + C;

schur_f = B_T * A_invers * F - G;

p = schur_S \ schur_f;

u = A_invers * ( F - B * p );