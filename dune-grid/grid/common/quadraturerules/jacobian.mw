<?xml version="1.0" encoding="UTF-8"?>
<Worksheet><Version major="6" minor="1"/><View-Properties><Zoom percentage="100"/></View-Properties><Styles><Layout alignment="left" bullet="none" firstindent="0.0" leftmargin="0.0" linebreak="space" linespacing="0.0" name="Normal" rightmargin="0.0" spaceabove="0.0" spacebelow="0.0"/><Layout alignment="centred" bullet="none" linespacing="0.5" name="Maple Output"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="Maple Input" opaque="false" size="12"/><Font background="[0,0,0]" family="Lucida Bright" foreground="[0,0,255]" name="2D Output" opaque="false" readonly="true" size="12"/></Styles><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">restart: Digits:=100; maxp:=44;</Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSdEaWdpdHNHNiIiJCsi</Equation></Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSVtYXhwRzYiIiNX</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">Digits := 100;</Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSdEaWdpdHNHNiIiJCsi</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">jacobi:=(p,a,b)-&gt;simplify(JacobiP(p,a,b,x),'JacobiP');</Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSdqYWNvYmlHNiJmKjYlSSJwR0YlSSJhR0YlSSJiR0YlRiU2JEkpb3BlcmF0b3JHRiVJJmFycm93R0YlRiUtSSlzaW1wbGlmeUdGJTYkLUkoSmFjb2JpUEdGJTYmOSQ5JTkmSSJ4R0YlLkYyRiVGJUYl</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">A:=(n,a,b)-&gt;GAMMA(2*n+a+b+1)/(2^n*n!*GAMMA(n+a+b+1));</Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSJBRzYiZio2JUkibkdGJUkiYUdGJUkiYkdGJUYlNiRJKW9wZXJhdG9yR0YlSSZhcnJvd0dGJUYlKiotSSZHQU1NQUdGJTYjLCo5JCIiIzklIiIiOSZGNkY2RjZGNilGNEYzISIiLUkqZmFjdG9yaWFsR0kqcHJvdGVjdGVkR0Y8NiNGM0Y5LUYwNiMsKkYzRjZGNUY2RjdGNkY2RjZGOUYlRiVGJQ==</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">gamma_n:=(n,a,b)-&gt;1/(2^(2*n)*(n!)^2)*(2^(2*n+a+b+1)*n!)/(2*n+a+b+1)*(GAMMA(n+a+1)*GAMMA(n+b+1))/(GAMMA(n+a+b+1)) ;</Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SShnYW1tYV9uRzYiZio2JUkibkdGJUkiYUdGJUkiYkdGJUYlNiRJKW9wZXJhdG9yR0YlSSZhcnJvd0dGJUYlKjQiIiJGLykiIiMsJDkkRjEhIiItSSpmYWN0b3JpYWxHSSpwcm90ZWN0ZWRHRjc2I0YzISIjKUYxLCpGM0YxOSVGLzkmRi9GL0YvRi9GNUYvRjtGNC1JJkdBTU1BR0YlNiMsKEYzRi9GPEYvRi9GL0YvLUY/NiMsKEYzRi9GPUYvRi9GL0YvLUY/NiMsKkYzRi9GPEYvRj1GL0YvRi9GNEYlRiVGJQ==</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">weight:=(n,a,b,xx)-&gt;A(n,a,b)/A(n-1,a,b)*gamma_n(n-1,a,b)/JacobiP(n-1,a,b,xx)/subs(X=xx,diff(JacobiP(n,a,b,X),X));</Text-field></Input><Output><Text-field layout="Maple Output" style="2D Output"><Equation>NiM+SSd3ZWlnaHRHNiJmKjYmSSJuR0YlSSJhR0YlSSJiR0YlSSN4eEdGJUYlNiRJKW9wZXJhdG9yR0YlSSZhcnJvd0dGJUYlKiwtSSJBR0YlNiU5JDklOSYiIiItRjE2JSwmRjNGNiEiIkY2RjRGNUY6LUkoZ2FtbWFfbkdGJUY4RjYtSShKYWNvYmlQR0YlNiZGOUY0RjU5J0Y6LUklc3Vic0dJKnByb3RlY3RlZEdGQzYkL0kiWEdGJUZALUklZGlmZkdGQzYkLUY+NiZGM0Y0RjVGRkZGRjpGJUYlRiU=</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">quad:=proc(file,name,alpha,beta,maxp)
local i,N,n,points,p,w,fd;
fd := fopen(file, WRITE);
fprintf(fd,"// WARNING
// -*-c++-*-
// This file is automatically generated by jacobian.mw! Don't edit by hand!

#include \"config.h\"
#include \"../quadraturerules.hh\"

namespace Dune {
  
  template&lt;typename ct&gt;
  void %sQuadratureRule&lt;ct,1&gt;::init(int p,
         std::vector&lt; FieldVector&lt;ct, dim&gt; &gt; &amp; _points,
         std::vector&lt; double &gt; &amp; _weight,
         int &amp; delivered_order)
  {
    switch(p)
    {
",name,name);
for i from 1 to maxp do
  if i=1 then
    fprintf(fd,"    // order 0,1\n    case 0:\n    case 1:\n");
  else
    fprintf(fd,"    // order %d\n    case %d:\n", i, i);
  end if:
  points := fsolve(jacobi(i,alpha,beta)):
  if i=1 then points:=array([points]): end if:
  N:=0:
  for p in points do N:=N+1: end do:
  fprintf(fd,"      delivered_order = %d;\n",i);
  fprintf(fd,"      _points.resize(%d);\n",N);
  fprintf(fd,"      _weight.resize(%d);\n",N);
  n:=0:
  for n from 1 to N do
    p:=points[n]:
    fprintf(fd,"      _points[%d] = %a;\n",n-1,p/2+0.5);
    w:=evalf(weight(i,alpha,beta,p));
    fprintf(fd,"      _weight[%d] = %a;\n",n-1,w/2);
  end do:
  fprintf(fd,"      break;\n\n");
end do:
fprintf(fd,"    default:
      DUNE_THROW(QuadratureOrderOutOfRange, \"Quadrature rule \" &lt;&lt; p &lt;&lt; \" not supported!\");
    }
  }

  template %sQuadratureRule&lt;float, 1&gt;::%sQuadratureRule(int);
  template %sQuadratureRule&lt;double, 1&gt;::%sQuadratureRule(int);

} // namespace
",name,name,name,name);
fclose(fd);
end proc:</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">quad("jacobi_1_0.cc","Jacobi1",1,0,44);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">quad("jacobi_2_0.cc","Jacobi2",2,0,44);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">quad("cube.cc","Cube",0,0,44);</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group><Text-field/><Text-field/><Text-field/><Text-field/><Text-field/><Text-field/><Text-field/></Worksheet>