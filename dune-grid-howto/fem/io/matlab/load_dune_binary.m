function A = load_dune_binary(filename)
%function A = load_dune_binary(filename)
%
% load binary file, which represents some dune structure
% e.g. generated by Dune::MatlabHelper::saveDofVectorBinary,
% saveSparseMatrixBinary or saveDenseMatrixBinary. A magicstr selection
% string is read for determining filetype, Two magic numbers are read 
% (double and int) to check the compatibility of the
% binary file. If binary format does not match, the reading must be 
% modified in this file during opening of the file-handle.
%
% format: 
% magic number "DDV" for Dune Dof Vector, "DSM" for Dune Sparse Matrix
%   and "DDM" for Dune-Dense-Matrix
% magic numbers: int 111, double 111 for platform check
%    numerical data in certain format 
% "EOF" as marker of EOF
  
% Bernard Haasdonk 21.2.2007

  fid = fopen(filename,'r');
  % if standard reading is not the correct format for a given binary
  % file, activate the following:
  %fid = fopen(filename,'r','ieee-be');
  
  magicstr = char(fread(fid,3,'char'))';  
  if ~ismember({magicstr},{'DDV','DSM','DDM','DDT','DVV','DG2'})
    error('read magicstr does not indicate known Dune Binary Filetype!');
  end;
  
  magicint = fread(fid,1,'int');
  magicdouble = fread(fid,1,'double');
  
  if (magicint~=111) | (magicdouble~=111.0)
    error(['magic numbers not read correctly, change the binary format in' ...
	   ' this reading routine!']);
  end;
  
  switch magicstr
   case 'DDV' %%%%%%%%%%%%%%%% Read Vector %%%%%%%%%%%%%%%%%%%%%%%%
    nentries = fread(fid,1,'int');
    disp(['generating and reading vector with ', ...
	  num2str(nentries),' entries.']);
    A = fread(fid,nentries,'double');
   case 'DSM' %%%%%%%%%%%%%%%% Read Sparse Matrix %%%%%%%%%%%%%%%%%
    
    nrows = fread(fid,1,'int');
    ncols = fread(fid,1,'int');
    nnonzeros = fread(fid,1,'int');
    ntotalnonzeros = fread(fid,1,'int'); 
    
    disp(['generating and reading ',num2str(nrows),'x',num2str(ncols),...
	  ' sparse matrix with ',num2str(ntotalnonzeros),' totalnonzeros.']);
    A = sparse(nrows,ncols,nnonzeros);
    
    for i=1:ntotalnonzeros
      row = fread(fid,1,'int');
      col = fread(fid,1,'int');
      val = fread(fid,1,'double');
      A(row+1,col+1) = val;
    end;  
   case 'DDM' %%%%%%%%%%%%%%%% Read Dense Matrix %%%%%%%%%%%%%%%%%
    
    nrows = fread(fid,1,'int');
    ncols = fread(fid,1,'int');
    
    disp(['generating and reading ',num2str(nrows),'x',num2str(ncols),...
	  ' dense matrix.']);
    A = zeros(nrows,ncols);
    
    %% the following can largely be optimized by block-reading!!!!!!
    for row = 1:nrows;
      for col= 1:ncols;
	val = fread(fid,1,'double');
	A(row,col) = val;
      end;  
    end;
   case 'DDT' %%%%%%%%%%%%%%%% Read Dense Tensor %%%%%%%%%%%%%%%%%
    
    nrows = fread(fid,1,'int');
    ncols = fread(fid,1,'int');
    ntensors = fread(fid,1,'int');
    
    disp(['generating and reading ',num2str(nrows),'x',num2str(ncols), 'x', num2str(ntensors),...
	  ' dense tensor.']);
    A = zeros(nrows,ncols,ntensors);
    
    %% the following can largely be optimized by block-reading!!!!!!
    for tensor = 1:ntensors;
     for row = 1:nrows;
      for col= 1:ncols;
	val = fread(fid,1,'double');
	A(row,col,tensor) = val;
      end;  
    end;
    end;
   case 'DVV' %%%%%%%%%%%%%%%% Read Dense Vector %%%%%%%%%%%%%%%%%
      nentries = fread(fid,1,'int');
    disp(['generating and reading vector with ', ...
	  num2str(nentries),' entries.']);
    A = fread(fid,nentries,'double');
   case 'DG2' %%%%%%%%%%%%%%%% Read Dense Matrix %%%%%%%%%%%%%%%%%
    
    dim = fread(fid,1,'int');
    pointNumber = fread(fid,1,'int');
    simplexNumber = fread(fid,1,'int');
    
    pnrows = pointNumber;
    pncols = dim;
    %pnrows = fread(fid,1,'int');
    %pncols = fread(fid,1,'int');
    
    disp(['generating and reading ',num2str(pnrows),'x',num2str(pncols),...
	  'p dense matrix.']);
    p = zeros(pnrows,pncols);
    
    %% the following can largely be optimized by block-reading!!!!!!
    for row = 1:pnrows;
      for col= 1:pncols;
	val = fread(fid,1,'double');
	p(row,col) = val;
      end;  
    end;

    tncols = simplexNumber;
    tnrows = 3;
    %% in general not 3, but for simplicity we initially take triangles instead of simplices, is that ok?
    %tnrows = fread(fid,1,'int');
    %tncols = fread(fid,1,'int');
    
    disp(['generating and reading ',num2str(tnrows),'x',num2str(tncols),...
	  't dense matrix.']);
    t = zeros(tnrows,tncols);
    
    %% the following can largely be optimized by block-reading!!!!!!
    for row = 1:tnrows;
      for col= 1:tncols;
	val = fread(fid,1,'double');
	t(row,col) = val;
      end;  
    end;


   otherwise
    error('Do not know how to handle Dune Binary Filetype!');
  end;
  
  % ensure correct EOF
  eofstr = char(fread(fid,3,'char'))';
  if ~isequal(eofstr,'EOF')
    error('read eofstr does not indicate end of binary file!');
  end;

    
